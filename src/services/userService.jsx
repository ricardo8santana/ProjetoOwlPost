import axios from "axios";

const defaultImage = '';


const urlAPI = 'http://127.0.0.1:3000';

export class User {
    constructor(id, username, email, password, profilePicture) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
        this.profilePicture = profilePicture;
    }
}

// export const defaultUser = new User(0, 'username', 'username@email.com', 'password', defaultImage);
export const defaultUser = new User(0, 'username', 'username@email.com', 'password', defaultImage);

const getUsers = async () => {
    try {
        const response = await axios.get(urlAPI + '/usuarios/');
        return response.data.map(({id_usuario, nome, email, senha, foto_perfil}) => {
            return new User(id_usuario, nome, email, senha, `data:image/png;base64,${foto_perfil}`);
        });
    }
    catch (err) {
        console.error("Erro ao buscar usuários");
        return [];
    }
}
export const getUser = async (id) => {
    try {
        const response = await axios.get(urlAPI + `/usuarios/id/${id}`);
        const { id_usuario, nome, email, senha, foto_perfil } = response.data.user;
        return new User(id_usuario, nome, email, senha, `data:image/png;base64,${foto_perfil}`);
    } 
    catch (err) {
        console.error(`Erro ao buscar usuário! ${err}`);
        return null;
    }
};

export const createUser = async (username, email, password) => {
    try {
        await axios.put(urlAPI + '/usuarios/', {
            nome: username,
            email: email,
            senha: password,
            foto_perfil: defaultImage,
        });
    }
    catch (err) {
        console.error(`Erro ao criar usuários! ( ${err} )`);
    }
};



const onUserLogout = new Event('user-logout');
const onUserLogin = new Event('user-login');

export const login = async (email, password) => {
    try {
        const response = await axios.post(`${urlAPI}/usuarios/login/`, {
            email: email,
            senha: password
        });

        const userID = response.data.userID;
        const currentUser = await getUser(userID);

        localStorage.setItem('currentUserID', userID);
        window.dispatchEvent(onUserLogin);

        return currentUser;
    } catch (err) {
        console.log(`Erro ao fazer login! ( ${err} )`);
        return null;
    }
}

export const logout = async () => {
    try {
        localStorage.removeItem('currentUserID');
        window.dispatchEvent(onUserLogout);
    } catch (error) {
        console.log('Erro ao deslogar');        
    }
}

export const isLoggedIn = () => {
    const userID = localStorage.getItem('currentUserID');
    return userID !== null;
}

export const getLoggedUser = async () => {
    const userID = localStorage.getItem('currentUserID');
    
    if (userID === null) {
        return null;
    }

    return await getUser(userID);
}

export const debugGetRandomUser = async () => {
    const users = await getUsers();
    return users[Math.floor(Math.random() * users.length)];
};